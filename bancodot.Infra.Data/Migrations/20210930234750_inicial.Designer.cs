// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bancodot.Infra.Data.Context;

namespace bancodot.Infra.Data.Migrations
{
    [DbContext(typeof(MysqlContext))]
    [Migration("20210930234750_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("bancodot.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("State")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<string>("StretAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("AccountStatus")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int(11)");

                    b.Property<float>("Balance")
                        .HasColumnType("float(12,0)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime");

                    b.Property<float>("SpecialLimit")
                        .HasColumnType("float(12,0)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AgencyId" }, "IX_Account_AgencyId");

                    b.HasIndex(new[] { "ClientId" }, "IX_Account_ClientId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_Account_ManagerId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddressId" }, "fk_agency_endereco");

                    b.ToTable("agency");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("BirtDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("Genre")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddressId" }, "fk_cliente_endereco");

                    b.ToTable("client");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("BirtDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime?>("DismissalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dismissalDate");

                    b.Property<string>("Enrollment")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<int>("Genre")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Occupation")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<float>("Salary")
                        .HasColumnType("float(12,0)");

                    b.Property<int>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AgencyId" }, "IX_Employers_AgencyId");

                    b.HasIndex(new[] { "AddressId" }, "fk_employee_endereco");

                    b.ToTable("employers");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Account", b =>
                {
                    b.HasOne("bancodot.Domain.Entities.Agency", "Agency")
                        .WithMany("Accounts")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("fk_account_agency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bancodot.Domain.Entities.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_account_client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bancodot.Domain.Entities.Employee", "Manager")
                        .WithMany("Accounts")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_account_manager")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Client");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Agency", b =>
                {
                    b.HasOne("bancodot.Domain.Address", "Address")
                        .WithMany("Agencies")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_agency_endereco");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Client", b =>
                {
                    b.HasOne("bancodot.Domain.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_cliente_endereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Employee", b =>
                {
                    b.HasOne("bancodot.Domain.Address", "Address")
                        .WithMany("Employeers")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_employee_endereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bancodot.Domain.Entities.Agency", "Agency")
                        .WithMany("Employers")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("fk_employee_agency");

                    b.Navigation("Address");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("bancodot.Domain.Address", b =>
                {
                    b.Navigation("Agencies");

                    b.Navigation("Clients");

                    b.Navigation("Employeers");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Agency", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Employers");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Client", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("bancodot.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
